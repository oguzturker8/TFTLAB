{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Repos\\\\TFTLAB\\\\App.js\";\nimport React from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport \"react-native-gesture-handler\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport HomeRoute from \"./routes/homeroute\";\nimport { useFonts } from \"expo-font\";\nimport { AppLoading } from \"expo\";\nexport default function App() {\n  var _useFonts = useFonts({\n    RobotoBlack: require(\"./assets/fonts/Roboto-Black.ttf\"),\n    RobotoBold: require(\"./assets/fonts/Roboto-Bold.ttf\"),\n    RobotoLight: require(\"./assets/fonts/Roboto-Light.ttf\"),\n    RobotoMedium: require(\"./assets/fonts/Roboto-Medium.ttf\"),\n    RobotoRegular: require(\"./assets/fonts/Roboto-Regular.ttf\"),\n    RobotoThin: require(\"./assets/fonts/Roboto-Thin.ttf\")\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 2),\n      loaded = _useFonts2[0],\n      error = _useFonts2[1];\n\n  if (!loaded) {\n    return React.createElement(AppLoading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 12\n      }\n    });\n  } else {\n    return React.createElement(NavigationContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }\n    }, React.createElement(HomeRoute, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }\n    }));\n  }\n}\nvar styles = StyleSheet.create({\n  container: {\n    width: Dimensions.get(\"window\").width,\n    height: Dimensions.get(\"window\").height,\n    backgroundColor: \"#34495e\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});","map":{"version":3,"sources":["D:/Repos/TFTLAB/App.js"],"names":["React","NavigationContainer","HomeRoute","useFonts","AppLoading","App","RobotoBlack","require","RobotoBold","RobotoLight","RobotoMedium","RobotoRegular","RobotoThin","loaded","error","styles","StyleSheet","create","container","width","Dimensions","get","height","backgroundColor","alignItems","justifyContent"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,OAAO,8BAAP;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,SAAP;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,SAASC,UAAT,QAA2B,MAA3B;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA,kBACJF,QAAQ,CAAC;AAC/BG,IAAAA,WAAW,EAAEC,OAAO,mCADW;AAE/BC,IAAAA,UAAU,EAAED,OAAO,kCAFY;AAG/BE,IAAAA,WAAW,EAAEF,OAAO,mCAHW;AAI/BG,IAAAA,YAAY,EAAEH,OAAO,oCAJU;AAK/BI,IAAAA,aAAa,EAAEJ,OAAO,qCALS;AAM/BK,IAAAA,UAAU,EAAEL,OAAO;AANY,GAAD,CADJ;AAAA;AAAA,MACrBM,MADqB;AAAA,MACbC,KADa;;AAU5B,MAAI,CAACD,MAAL,EAAa;AACX,WAAO,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFD,MAEO;AACL,WACE,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD;AACF;AAED,IAAME,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,KAAK,EAAEC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBF,KADvB;AAETG,IAAAA,MAAM,EAAEF,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,MAFxB;AAGTC,IAAAA,eAAe,EAAE,SAHR;AAITC,IAAAA,UAAU,EAAE,QAJH;AAKTC,IAAAA,cAAc,EAAE;AALP;AADoB,CAAlB,CAAf","sourcesContent":["import React from \"react\";\nimport { StyleSheet, Dimensions } from \"react-native\";\nimport \"react-native-gesture-handler\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport HomeRoute from \"./routes/homeroute\";\nimport { useFonts } from \"expo-font\";\nimport { AppLoading } from \"expo\";\n\nexport default function App() {\n  const [loaded, error] = useFonts({\n    RobotoBlack: require(\"./assets/fonts/Roboto-Black.ttf\"),\n    RobotoBold: require(\"./assets/fonts/Roboto-Bold.ttf\"),\n    RobotoLight: require(\"./assets/fonts/Roboto-Light.ttf\"),\n    RobotoMedium: require(\"./assets/fonts/Roboto-Medium.ttf\"),\n    RobotoRegular: require(\"./assets/fonts/Roboto-Regular.ttf\"),\n    RobotoThin: require(\"./assets/fonts/Roboto-Thin.ttf\"),\n  });\n\n  if (!loaded) {\n    return <AppLoading />;\n  } else {\n    return (\n      <NavigationContainer>\n        <HomeRoute />\n      </NavigationContainer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    width: Dimensions.get(\"window\").width,\n    height: Dimensions.get(\"window\").height,\n    backgroundColor: \"#34495e\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}