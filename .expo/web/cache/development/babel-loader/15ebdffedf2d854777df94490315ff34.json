{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"D:\\\\Repos\\\\TFTLAB\\\\App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport \"react-native-gesture-handler\";\nimport { DefaultTheme } from \"@react-navigation/native\";\nimport { useFonts } from \"expo-font\";\nimport { AppLoading } from \"expo\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport HomeBottomRoute from \"./routes/Home/homebottomroute\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport Updater from \"./screens/Updater/updater\";\nimport Loader from \"./screens/Loader/loader\";\nimport { global } from \"./styles/global\";\n\nvar MyTheme = _objectSpread(_objectSpread({}, DefaultTheme), {}, {\n  dark: false,\n  colors: _objectSpread(_objectSpread({}, DefaultTheme.colors), {}, {\n    background: global.theme.backgroundColor\n  })\n});\n\nvar readFile = function readFile(key) {\n  var jsonValue;\n  return _regeneratorRuntime.async(function readFile$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(key));\n\n        case 3:\n          jsonValue = _context.sent;\n          return _context.abrupt(\"return\", jsonValue != null ? JSON.parse(jsonValue) : null);\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n};\n\nvar writeFile = function writeFile(key, value) {\n  var file;\n  return _regeneratorRuntime.async(function writeFile$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          file = JSON.stringify(value);\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(key, file).then(function () {}));\n\n        case 4:\n          _context2.next = 9;\n          break;\n\n        case 6:\n          _context2.prev = 6;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(_context2.t0);\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n};\n\nvar App = function App() {\n  var _useFonts = useFonts({\n    RobotoBlack: require(\"./assets/fonts/Roboto-Black.ttf\"),\n    RobotoBold: require(\"./assets/fonts/Roboto-Bold.ttf\"),\n    RobotoLight: require(\"./assets/fonts/Roboto-Light.ttf\"),\n    RobotoMedium: require(\"./assets/fonts/Roboto-Medium.ttf\"),\n    RobotoRegular: require(\"./assets/fonts/Roboto-Regular.ttf\"),\n    RobotoThin: require(\"./assets/fonts/Roboto-Thin.ttf\")\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 2),\n      loaded = _useFonts2[0],\n      error = _useFonts2[1];\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      db = _useState2[0],\n      setDb = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isUpToDate = _useState4[0],\n      setIsUpToDate = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isResolved = _useState6[0],\n      setIsResolved = _useState6[1];\n\n  var currentDate = {\n    year: new Date().getFullYear(),\n    month: new Date().getMonth() + 1,\n    day: new Date().getDate()\n  };\n  useEffect(function () {\n    readFile(\"@last\").then(function (lastExecuteDate) {\n      if (lastExecuteDate != null) {\n        fetch(\"https://tftlab.herokuapp.com/api/dynamic/update\", {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\"\n          }\n        }).then(function (res) {\n          return res.json();\n        }).then(function (resJson) {\n          var tempUp2Date = lastExecuteDate.year > resJson[0].year ? true : lastExecuteDate.month > resJson[0].month ? true : lastExecuteDate.day > resJson[0].day ? true : false;\n          setIsUpToDate(tempUp2Date);\n\n          if (tempUp2Date) {\n            console.log(\"guncel\");\n            var tmpDB = readFile(\"@database\");\n            tmpDB.then(function (el) {\n              setDb(el);\n              setIsResolved(true);\n            });\n          } else {\n            console.log(\"Guncel degil1\", isUpToDate, lastExecuteDate, resJson[0]);\n            setIsUpToDate(false);\n            setIsResolved(true);\n          }\n        }).catch(function (error) {\n          return console.error(error);\n        });\n      } else {\n        console.log(\"Guncel degil2\");\n        setIsUpToDate(false);\n      }\n\n      writeFile(\"@last\", currentDate);\n    }).catch(function (e) {\n      return console.log(e);\n    });\n  }, []);\n\n  if (!loaded) {\n    return React.createElement(AppLoading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 12\n      }\n    });\n  } else {\n    return isResolved ? isUpToDate && db ? React.createElement(NavigationContainer, {\n      theme: MyTheme,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }\n    }, React.createElement(HomeBottomRoute, {\n      database: db,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }\n    })) : React.createElement(Updater, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }\n    }) : React.createElement(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 7\n      }\n    });\n  }\n};\n\nexport default App;","map":{"version":3,"sources":["D:/Repos/TFTLAB/App.js"],"names":["React","useState","useEffect","DefaultTheme","useFonts","AppLoading","NavigationContainer","HomeBottomRoute","AsyncStorage","Updater","Loader","global","MyTheme","dark","colors","background","theme","backgroundColor","readFile","key","getItem","jsonValue","JSON","parse","console","log","writeFile","value","file","stringify","setItem","then","App","RobotoBlack","require","RobotoBold","RobotoLight","RobotoMedium","RobotoRegular","RobotoThin","loaded","error","db","setDb","isUpToDate","setIsUpToDate","isResolved","setIsResolved","currentDate","year","Date","getFullYear","month","getMonth","day","getDate","lastExecuteDate","fetch","method","headers","res","json","resJson","tempUp2Date","tmpDB","el","catch","e"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"react-native-gesture-handler\";\nimport { DefaultTheme } from \"@react-navigation/native\";\nimport { useFonts } from \"expo-font\";\nimport { AppLoading } from \"expo\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport HomeBottomRoute from \"./routes/Home/homebottomroute\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport Updater from \"./screens/Updater/updater\";\nimport Loader from \"./screens/Loader/loader\";\nimport { global } from \"./styles/global\";\n\nconst MyTheme = {\n  ...DefaultTheme,\n  dark: false,\n  colors: {\n    ...DefaultTheme.colors,\n    background: global.theme.backgroundColor,\n  },\n};\n\nconst readFile = async (key) => {\n  try {\n    const jsonValue = await AsyncStorage.getItem(key);\n    return jsonValue != null ? JSON.parse(jsonValue) : null;\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nconst writeFile = async (key, value) => {\n  try {\n    const file = JSON.stringify(value);\n    await AsyncStorage.setItem(key, file).then(() => {});\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nconst App = () => {\n  const [loaded, error] = useFonts({\n    RobotoBlack: require(\"./assets/fonts/Roboto-Black.ttf\"),\n    RobotoBold: require(\"./assets/fonts/Roboto-Bold.ttf\"),\n    RobotoLight: require(\"./assets/fonts/Roboto-Light.ttf\"),\n    RobotoMedium: require(\"./assets/fonts/Roboto-Medium.ttf\"),\n    RobotoRegular: require(\"./assets/fonts/Roboto-Regular.ttf\"),\n    RobotoThin: require(\"./assets/fonts/Roboto-Thin.ttf\"),\n  });\n\n  const [db, setDb] = useState(0);\n  const [isUpToDate, setIsUpToDate] = useState(0);\n  const [isResolved, setIsResolved] = useState(0);\n\n  const currentDate = {\n    year: new Date().getFullYear(),\n    month: new Date().getMonth() + 1,\n    day: new Date().getDate(),\n  };\n\n  useEffect(() => {\n    readFile(\"@last\")\n      .then((lastExecuteDate) => {\n        if (lastExecuteDate != null) {\n          fetch(\"https://tftlab.herokuapp.com/api/dynamic/update\", {\n            method: \"GET\",\n            headers: {\n              \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\",\n            },\n          })\n            .then((res) => res.json())\n            .then((resJson) => {\n              let tempUp2Date =\n                lastExecuteDate.year > resJson[0].year\n                  ? true\n                  : lastExecuteDate.month > resJson[0].month\n                  ? true\n                  : lastExecuteDate.day > resJson[0].day\n                  ? true\n                  : false;\n              setIsUpToDate(tempUp2Date);\n\n              if (tempUp2Date) {\n                //LOCALDAN DB YI OKU\n                //CALISTIR\n                console.log(\"guncel\");\n                let tmpDB = readFile(\"@database\");\n                tmpDB.then((el) => {\n                  setDb(el);\n                  setIsResolved(true);\n                });\n              } else {\n                //GUNCELLE\n                //CALISTIR\n                console.log(\n                  \"Guncel degil1\",\n                  isUpToDate,\n                  lastExecuteDate,\n                  resJson[0]\n                );\n                setIsUpToDate(false);\n                setIsResolved(true);\n              }\n            })\n            .catch((error) => console.error(error));\n        } else {\n          //GUNCELLE\n          //CALISTIR\n          console.log(\"Guncel degil2\");\n          setIsUpToDate(false);\n        }\n        writeFile(\"@last\", currentDate);\n      })\n      .catch((e) => console.log(e));\n  }, []);\n\n  if (!loaded) {\n    return <AppLoading />;\n  } else {\n    return isResolved ? (\n      isUpToDate && db ? (\n        <NavigationContainer theme={MyTheme}>\n          <HomeBottomRoute database={db} />\n        </NavigationContainer>\n      ) : (\n        <Updater />\n      )\n    ) : (\n      <Loader />\n    );\n  }\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}