{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"D:\\\\Repos\\\\TFTLAB\\\\screens\\\\itemtier.js\";\nimport React, { useState, useEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ItemTier from \"../components/itemtier\";\nimport Loading from \"../components/loading\";\n\nvar getItems = function getItems(setIsFetched, setChampsList) {\n  return _regeneratorRuntime.async(function getItems$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          fetch(\"http://192.168.1.5:3000/api/itemtier/\", {\n            method: \"GET\",\n            headers: {\n              \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\"\n            }\n          }).then(function (res) {\n            return res.json();\n          }).then(function (resJson) {\n            setChampsList(resJson);\n          }).catch(function (error) {\n            return console.error(error);\n          });\n          setIsFetched(true);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default function ItemsTier() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isFetched = _useState2[0],\n      setIsFetched = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      itemList = _useState4[0],\n      setItemList = _useState4[1];\n\n  useEffect(function () {\n    if (!isFetched) getItems(setIsFetched, setItemList);\n  });\n  return {\n    itemList: itemList\n  } ? React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.page,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, itemList != 0 ? React.createElement(FlatList, {\n    showsVerticalScrollIndicator: false,\n    data: itemList,\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(ItemTier, {\n        tier: item.tier,\n        items: item.items,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 15\n        }\n      });\n    },\n    keyExtractor: function keyExtractor(item, index) {\n      return String(index);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }\n  }) : React.createElement(Loading, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  }))) : null;\n}\nvar styles = StyleSheet.create({\n  page: {\n    width: Dimensions.get(\"window\").width * 0.9,\n    marginHorizontal: Dimensions.get(\"window\").width * 0.05,\n    backgroundColor: \"#123040\",\n    alignItems: \"center\",\n    elevation: 5\n  }\n});","map":{"version":3,"sources":["D:/Repos/TFTLAB/screens/itemtier.js"],"names":["React","useState","useEffect","ItemTier","Loading","getItems","setIsFetched","setChampsList","fetch","method","headers","then","res","json","resJson","catch","error","console","ItemsTier","isFetched","itemList","setItemList","styles","page","item","tier","items","index","String","StyleSheet","create","width","Dimensions","get","marginHorizontal","backgroundColor","alignItems","elevation"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;;AAEA,OAAOC,QAAP;AACA,OAAOC,OAAP;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAOC,YAAP,EAAqBC,aAArB;AAAA;AAAA;AAAA;AAAA;AACfC,UAAAA,KAAK,CAAC,uCAAD,EAA0C;AAC7CC,YAAAA,MAAM,EAAE,KADqC;AAE7CC,YAAAA,OAAO,EAAE;AACP,8BAAgB;AADT;AAFoC,WAA1C,CAAL,CAMGC,IANH,CAMQ,UAACC,GAAD;AAAA,mBAASA,GAAG,CAACC,IAAJ,EAAT;AAAA,WANR,EAOGF,IAPH,CAOQ,UAACG,OAAD,EAAa;AACjBP,YAAAA,aAAa,CAACO,OAAD,CAAb;AACD,WATH,EAUGC,KAVH,CAUS,UAACC,KAAD;AAAA,mBAAWC,OAAO,CAACD,KAAR,CAAcA,KAAd,CAAX;AAAA,WAVT;AAWAV,UAAAA,YAAY,CAAC,IAAD,CAAZ;;AAZe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB;;AAeA,eAAe,SAASY,SAAT,GAAqB;AAAA,kBACAjB,QAAQ,CAAC,KAAD,CADR;AAAA;AAAA,MAC3BkB,SAD2B;AAAA,MAChBb,YADgB;;AAAA,mBAEFL,QAAQ,CAAC,CAAD,CAFN;AAAA;AAAA,MAE3BmB,QAF2B;AAAA,MAEjBC,WAFiB;;AAGlCnB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACiB,SAAL,EAAgBd,QAAQ,CAACC,YAAD,EAAee,WAAf,CAAR;AACjB,GAFQ,CAAT;AAGA,SAAO;AAAED,IAAAA,QAAQ,EAARA;AAAF,MACL,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEE,MAAM,CAACC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,QAAQ,IAAI,CAAZ,GACC,oBAAC,QAAD;AACE,IAAA,4BAA4B,EAAE,KADhC;AAEE,IAAA,IAAI,EAAEA,QAFR;AAGE,IAAA,UAAU,EAAE;AAAA,UAAGI,IAAH,QAAGA,IAAH;AAAA,aACV,oBAAC,QAAD;AAAU,QAAA,IAAI,EAAEA,IAAI,CAACC,IAArB;AAA2B,QAAA,KAAK,EAAED,IAAI,CAACE,KAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADU;AAAA,KAHd;AAME,IAAA,YAAY,EAAE,sBAACF,IAAD,EAAOG,KAAP;AAAA,aAAiBC,MAAM,CAACD,KAAD,CAAvB;AAAA,KANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAUC,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXJ,CADF,CADK,GAiBH,IAjBJ;AAkBD;AAED,IAAML,MAAM,GAAGO,UAAU,CAACC,MAAX,CAAkB;AAC/BP,EAAAA,IAAI,EAAE;AACJQ,IAAAA,KAAK,EAAEC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBF,KAAzB,GAAiC,GADpC;AAEJG,IAAAA,gBAAgB,EAAEF,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBF,KAAzB,GAAiC,IAF/C;AAGJI,IAAAA,eAAe,EAAE,SAHb;AAIJC,IAAAA,UAAU,EAAE,QAJR;AAKJC,IAAAA,SAAS,EAAE;AALP;AADyB,CAAlB,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { StyleSheet, View, Dimensions, FlatList } from \"react-native\";\r\nimport ItemTier from \"../components/itemtier\";\r\nimport Loading from \"../components/loading\";\r\n\r\nconst getItems = async (setIsFetched, setChampsList) => {\r\n  fetch(\"http://192.168.1.5:3000/api/itemtier/\", {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\",\r\n    },\r\n  })\r\n    .then((res) => res.json())\r\n    .then((resJson) => {\r\n      setChampsList(resJson);\r\n    })\r\n    .catch((error) => console.error(error));\r\n  setIsFetched(true);\r\n};\r\n\r\nexport default function ItemsTier() {\r\n  const [isFetched, setIsFetched] = useState(false);\r\n  const [itemList, setItemList] = useState(0);\r\n  useEffect(() => {\r\n    if (!isFetched) getItems(setIsFetched, setItemList);\r\n  });\r\n  return { itemList } ? (\r\n    <View>\r\n      <View style={styles.page}>\r\n        {itemList != 0 ? (\r\n          <FlatList\r\n            showsVerticalScrollIndicator={false}\r\n            data={itemList}\r\n            renderItem={({ item }) => (\r\n              <ItemTier tier={item.tier} items={item.items} />\r\n            )}\r\n            keyExtractor={(item, index) => String(index)}\r\n          />\r\n        ) : (\r\n          <Loading />\r\n        )}\r\n      </View>\r\n    </View>\r\n  ) : null;\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  page: {\r\n    width: Dimensions.get(\"window\").width * 0.9,\r\n    marginHorizontal: Dimensions.get(\"window\").width * 0.05,\r\n    backgroundColor: \"#123040\",\r\n    alignItems: \"center\",\r\n    elevation: 5,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}