{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nvar _jsxFileName = \"D:\\\\Repos\\\\TFTLAB\\\\node_modules\\\\react-native-walkthrough-tooltip\\\\src\\\\tooltip.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport rfcIsEqual from 'react-fast-compare';\nimport { Point, Size, Rect, swapSizeDimmensions, makeChildlessRect, computeCenterGeometry, computeTopGeometry, computeBottomGeometry, computeLeftGeometry, computeRightGeometry } from \"./geom\";\nimport styleGenerator from \"./styles\";\nimport TooltipChildrenContext from \"./tooltip-children.context\";\nexport { TooltipChildrenContext };\nvar DEFAULT_DISPLAY_INSETS = {\n  top: 24,\n  bottom: 24,\n  left: 24,\n  right: 24\n};\n\nvar computeDisplayInsets = function computeDisplayInsets(insetsFromProps) {\n  return _extends({}, DEFAULT_DISPLAY_INSETS, insetsFromProps);\n};\n\nvar invertPlacement = function invertPlacement(placement) {\n  switch (placement) {\n    case 'top':\n      return 'bottom';\n\n    case 'bottom':\n      return 'top';\n\n    case 'right':\n      return 'left';\n\n    case 'left':\n      return 'right';\n\n    default:\n      return placement;\n  }\n};\n\nvar Tooltip = function (_Component) {\n  _inherits(Tooltip, _Component);\n\n  var _super = _createSuper(Tooltip);\n\n  function Tooltip(props) {\n    var _this;\n\n    _classCallCheck(this, Tooltip);\n\n    _this = _super.call(this, props);\n\n    _this.updateWindowDims = function (dims) {\n      _this.setState({\n        windowDims: dims.window,\n        contentSize: new Size(0, 0),\n        adjustedContentSize: new Size(0, 0),\n        anchorPoint: new Point(0, 0),\n        tooltipOrigin: new Point(0, 0),\n        childRect: new Rect(0, 0, 0, 0),\n        measurementsFinished: false\n      }, function () {\n        setTimeout(function () {\n          _this.measureChildRect();\n        }, 500);\n      });\n    };\n\n    _this.doChildlessPlacement = function () {\n      _this.onChildMeasurementComplete(makeChildlessRect({\n        displayInsets: _this.state.displayInsets,\n        placement: _this.state.placement,\n        windowDims: _this.state.windowDims\n      }));\n    };\n\n    _this.measureContent = function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n          width = _e$nativeEvent$layout.width,\n          height = _e$nativeEvent$layout.height;\n      var contentSize = new Size(width, height);\n\n      _this.setState({\n        contentSize: contentSize\n      }, function () {\n        _this.computeGeometry();\n      });\n    };\n\n    _this.onChildMeasurementComplete = function (rect) {\n      _this.setState({\n        childRect: rect,\n        waitingForInteractions: false\n      }, function () {\n        _this.isMeasuringChild = false;\n\n        if (_this.state.contentSize.width) {\n          _this.computeGeometry();\n        }\n      });\n    };\n\n    _this.measureChildRect = function () {\n      var doMeasurement = function doMeasurement() {\n        if (!_this.isMeasuringChild) {\n          _this.isMeasuringChild = true;\n\n          if (_this.childWrapper.current && typeof _this.childWrapper.current.measure === 'function') {\n            _this.childWrapper.current.measure(function (x, y, width, height, pageX, pageY) {\n              var childRect = new Rect(pageX, pageY, width, height);\n\n              if (Object.values(childRect).every(function (value) {\n                return value !== undefined;\n              })) {\n                _this.onChildMeasurementComplete(childRect);\n              } else {\n                _this.doChildlessPlacement();\n              }\n            });\n          } else {\n            _this.doChildlessPlacement();\n          }\n        }\n      };\n\n      if (_this.props.useInteractionManager) {\n        InteractionManager.runAfterInteractions(function () {\n          doMeasurement();\n        });\n      } else {\n        doMeasurement();\n      }\n    };\n\n    _this.computeGeometry = function () {\n      var _this$props = _this.props,\n          arrowSize = _this$props.arrowSize,\n          childContentSpacing = _this$props.childContentSpacing;\n      var _this$state = _this.state,\n          childRect = _this$state.childRect,\n          contentSize = _this$state.contentSize,\n          displayInsets = _this$state.displayInsets,\n          placement = _this$state.placement,\n          windowDims = _this$state.windowDims;\n      var options = {\n        displayInsets: displayInsets,\n        childRect: childRect,\n        windowDims: windowDims,\n        arrowSize: placement === 'top' || placement === 'bottom' ? arrowSize : swapSizeDimmensions(arrowSize),\n        contentSize: contentSize,\n        childContentSpacing: childContentSpacing\n      };\n      var geom = computeTopGeometry(options);\n\n      if (placement === 'center' && React.Children.count(_this.props.children) === 0) {\n        geom = computeCenterGeometry(options);\n      } else {\n        switch (placement) {\n          case 'bottom':\n            geom = computeBottomGeometry(options);\n            break;\n\n          case 'left':\n            geom = computeLeftGeometry(options);\n            break;\n\n          case 'right':\n            geom = computeRightGeometry(options);\n            break;\n\n          case 'top':\n          default:\n            break;\n        }\n      }\n\n      var _geom = geom,\n          tooltipOrigin = _geom.tooltipOrigin,\n          anchorPoint = _geom.anchorPoint,\n          adjustedContentSize = _geom.adjustedContentSize;\n\n      _this.setState({\n        tooltipOrigin: tooltipOrigin,\n        anchorPoint: anchorPoint,\n        placement: placement,\n        measurementsFinished: childRect.width && contentSize.width,\n        adjustedContentSize: adjustedContentSize\n      });\n    };\n\n    _this.renderChildInTooltip = function () {\n      var _this$state$childRect = _this.state.childRect,\n          height = _this$state$childRect.height,\n          width = _this$state$childRect.width,\n          x = _this$state$childRect.x,\n          y = _this$state$childRect.y;\n\n      var onTouchEnd = function onTouchEnd() {\n        if (_this.props.closeOnChildInteraction) {\n          _this.props.onClose();\n        }\n      };\n\n      return React.createElement(TooltipChildrenContext.Provider, {\n        value: {\n          tooltipDuplicate: true\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        onTouchEnd: onTouchEnd,\n        pointerEvents: _this.props.allowChildInteraction ? 'box-none' : 'none',\n        style: {\n          position: 'absolute',\n          height: height,\n          width: width,\n          top: y,\n          left: x,\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 9\n        }\n      }, _this.props.children));\n    };\n\n    _this.renderContentForTooltip = function () {\n      var generatedStyles = styleGenerator({\n        adjustedContentSize: _this.state.adjustedContentSize,\n        anchorPoint: _this.state.anchorPoint,\n        arrowSize: _this.props.arrowSize,\n        displayInsets: _this.state.displayInsets,\n        measurementsFinished: _this.state.measurementsFinished,\n        ownProps: _objectSpread({}, _this.props),\n        placement: _this.state.placement,\n        tooltipOrigin: _this.state.tooltipOrigin,\n        topAdjustment: _this.props.topAdjustment\n      });\n      var hasChildren = React.Children.count(_this.props.children) > 0;\n\n      var onPressContent = function onPressContent() {\n        if (_this.props.closeOnContentInteraction) {\n          _this.props.onClose();\n        }\n      };\n\n      return React.createElement(TouchableWithoutFeedback, {\n        onPress: _this.props.onClose,\n        accessible: _this.props.accessible,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: generatedStyles.containerStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 9\n        }\n      }, React.createElement(View, {\n        style: [generatedStyles.backgroundStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 11\n        }\n      }, React.createElement(View, {\n        style: generatedStyles.tooltipStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 13\n        }\n      }, hasChildren ? React.createElement(View, {\n        style: generatedStyles.arrowStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 30\n        }\n      }) : null, React.createElement(View, {\n        onLayout: _this.measureContent,\n        style: generatedStyles.contentStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 15\n        }\n      }, React.createElement(TouchableWithoutFeedback, {\n        onPress: onPressContent,\n        accessible: _this.props.accessible,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 17\n        }\n      }, _this.props.content)))), hasChildren && _this.props.showChildInTooltip ? _this.renderChildInTooltip() : null));\n    };\n\n    var isVisible = props.isVisible,\n        useInteractionManager = props.useInteractionManager;\n    _this.isMeasuringChild = false;\n    _this.childWrapper = React.createRef();\n    _this.state = {\n      waitingForInteractions: isVisible && useInteractionManager,\n      contentSize: new Size(0, 0),\n      adjustedContentSize: new Size(0, 0),\n      anchorPoint: new Point(0, 0),\n      tooltipOrigin: new Point(0, 0),\n      childRect: new Rect(0, 0, 0, 0),\n      displayInsets: computeDisplayInsets(props.displayInsets),\n      placement: React.Children.count(props.children) === 0 ? invertPlacement(props.placement) : props.placement,\n      measurementsFinished: false,\n      windowDims: Dimensions.get('window')\n    };\n    return _this;\n  }\n\n  _createClass(Tooltip, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      Dimensions.addEventListener('change', this.updateWindowDims);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          content = _this$props2.content,\n          isVisible = _this$props2.isVisible,\n          placement = _this$props2.placement;\n      var displayInsets = this.state.displayInsets;\n      var contentChanged = !rfcIsEqual(prevProps.content, content);\n      var placementChanged = prevProps.placement !== placement;\n      var becameVisible = isVisible && !prevProps.isVisible;\n      var insetsChanged = !rfcIsEqual(prevState.displayInsets, displayInsets);\n\n      if (contentChanged || placementChanged || becameVisible || insetsChanged) {\n        setTimeout(function () {\n          _this2.measureChildRect();\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      Dimensions.removeEventListener('change', this.updateWindowDims);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          children = _this$props3.children,\n          isVisible = _this$props3.isVisible,\n          useReactNativeModal = _this$props3.useReactNativeModal;\n      var hasChildren = React.Children.count(children) > 0;\n      var showTooltip = isVisible && !this.state.waitingForInteractions;\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 7\n        }\n      }, useReactNativeModal ? React.createElement(Modal, {\n        transparent: true,\n        visible: showTooltip,\n        onRequestClose: this.props.onClose,\n        supportedOrientations: this.props.supportedOrientations,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 11\n        }\n      }, this.renderContentForTooltip()) : null, hasChildren ? React.createElement(View, {\n        ref: this.childWrapper,\n        onLayout: this.measureChildRect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 11\n        }\n      }, children) : null, !useReactNativeModal && showTooltip ? this.renderContentForTooltip() : null);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var nextState = {};\n      var nextPlacement = React.Children.count(nextProps.children) === 0 ? invertPlacement(nextProps.placement) : nextProps.placement;\n\n      if (nextPlacement !== prevState.placement) {\n        nextState.placement = nextPlacement;\n      }\n\n      var nextDisplayInsets = computeDisplayInsets(nextProps.displayInsets);\n\n      if (!rfcIsEqual(nextDisplayInsets, prevState.displayInsets)) {\n        nextState.displayInsets = nextDisplayInsets;\n      }\n\n      if (prevState.measurementsFinished && !nextProps.isVisible) {\n        nextState.measurementsFinished = false;\n        nextState.adjustedContentSize = new Size(0, 0);\n      }\n\n      if (Object.keys(nextState).length) {\n        return nextState;\n      }\n\n      return null;\n    }\n  }]);\n\n  return Tooltip;\n}(Component);\n\nTooltip.defaultProps = {\n  allowChildInteraction: true,\n  arrowSize: new Size(16, 8),\n  backgroundColor: 'rgba(0,0,0,0.5)',\n  childContentSpacing: 4,\n  children: null,\n  closeOnChildInteraction: true,\n  closeOnContentInteraction: true,\n  content: React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 14\n    }\n  }),\n  displayInsets: {},\n  isVisible: false,\n  onClose: function onClose() {\n    console.warn('[react-native-walkthrough-tooltip] onClose prop no provided');\n  },\n  placement: 'center',\n  showChildInTooltip: true,\n  supportedOrientations: ['portrait', 'landscape'],\n  useInteractionManager: false,\n  useReactNativeModal: true,\n  topAdjustment: 0,\n  accessible: true\n};\nTooltip.propTypes = {\n  allowChildInteraction: PropTypes.bool,\n  arrowSize: PropTypes.shape({\n    height: PropTypes.number,\n    width: PropTypes.number\n  }),\n  backgroundColor: PropTypes.string,\n  childContentSpacing: PropTypes.number,\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  closeOnChildInteraction: PropTypes.bool,\n  closeOnContentInteraction: PropTypes.bool,\n  content: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  displayInsets: PropTypes.shape({\n    top: PropTypes.number,\n    bottom: PropTypes.number,\n    left: PropTypes.number,\n    right: PropTypes.number\n  }),\n  isVisible: PropTypes.bool,\n  onClose: PropTypes.func,\n  placement: PropTypes.oneOf(['top', 'left', 'bottom', 'right', 'center']),\n  showChildInTooltip: PropTypes.bool,\n  supportedOrientations: PropTypes.arrayOf(PropTypes.string),\n  useInteractionManager: PropTypes.bool,\n  useReactNativeModal: PropTypes.bool,\n  topAdjustment: PropTypes.number,\n  accessible: PropTypes.bool\n};\nexport default Tooltip;","map":{"version":3,"sources":["D:/Repos/TFTLAB/node_modules/react-native-walkthrough-tooltip/src/tooltip.js"],"names":["React","Component","PropTypes","rfcIsEqual","Point","Size","Rect","swapSizeDimmensions","makeChildlessRect","computeCenterGeometry","computeTopGeometry","computeBottomGeometry","computeLeftGeometry","computeRightGeometry","styleGenerator","TooltipChildrenContext","DEFAULT_DISPLAY_INSETS","top","bottom","left","right","computeDisplayInsets","insetsFromProps","invertPlacement","placement","Tooltip","props","updateWindowDims","dims","setState","windowDims","window","contentSize","adjustedContentSize","anchorPoint","tooltipOrigin","childRect","measurementsFinished","setTimeout","measureChildRect","doChildlessPlacement","onChildMeasurementComplete","displayInsets","state","measureContent","e","nativeEvent","layout","width","height","computeGeometry","rect","waitingForInteractions","isMeasuringChild","doMeasurement","childWrapper","current","measure","x","y","pageX","pageY","Object","values","every","value","undefined","useInteractionManager","InteractionManager","runAfterInteractions","arrowSize","childContentSpacing","options","geom","Children","count","children","renderChildInTooltip","onTouchEnd","closeOnChildInteraction","onClose","tooltipDuplicate","allowChildInteraction","position","alignItems","justifyContent","renderContentForTooltip","generatedStyles","ownProps","topAdjustment","hasChildren","onPressContent","closeOnContentInteraction","accessible","containerStyle","backgroundStyle","tooltipStyle","arrowStyle","contentStyle","content","showChildInTooltip","isVisible","createRef","Dimensions","get","addEventListener","prevProps","prevState","contentChanged","placementChanged","becameVisible","insetsChanged","removeEventListener","useReactNativeModal","showTooltip","supportedOrientations","nextProps","nextState","nextPlacement","nextDisplayInsets","keys","length","defaultProps","backgroundColor","console","warn","propTypes","bool","shape","number","string","oneOfType","node","func","oneOf","arrayOf"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Dimensions,\n  InteractionManager,\n  Modal,\n  TouchableWithoutFeedback,\n  View,\n} from 'react-native';\nimport rfcIsEqual from 'react-fast-compare';\nimport {\n  Point,\n  Size,\n  Rect,\n  swapSizeDimmensions,\n  makeChildlessRect,\n  computeCenterGeometry,\n  computeTopGeometry,\n  computeBottomGeometry,\n  computeLeftGeometry,\n  computeRightGeometry,\n} from './geom';\nimport styleGenerator from './styles';\nimport TooltipChildrenContext from './tooltip-children.context';\n\nexport { TooltipChildrenContext };\n\nconst DEFAULT_DISPLAY_INSETS = {\n  top: 24,\n  bottom: 24,\n  left: 24,\n  right: 24,\n};\n\nconst computeDisplayInsets = insetsFromProps =>\n  Object.assign({}, DEFAULT_DISPLAY_INSETS, insetsFromProps);\n\nconst invertPlacement = placement => {\n  switch (placement) {\n    case 'top':\n      return 'bottom';\n    case 'bottom':\n      return 'top';\n    case 'right':\n      return 'left';\n    case 'left':\n      return 'right';\n    default:\n      return placement;\n  }\n};\n\nclass Tooltip extends Component {\n  static defaultProps = {\n    allowChildInteraction: true,\n    arrowSize: new Size(16, 8),\n    backgroundColor: 'rgba(0,0,0,0.5)',\n    childContentSpacing: 4,\n    children: null,\n    closeOnChildInteraction: true,\n    closeOnContentInteraction: true,\n    content: <View />,\n    displayInsets: {},\n    isVisible: false,\n    onClose: () => {\n      console.warn(\n        '[react-native-walkthrough-tooltip] onClose prop no provided',\n      );\n    },\n    placement: 'center', // falls back to \"top\" if there ARE children\n    showChildInTooltip: true,\n    supportedOrientations: ['portrait', 'landscape'],\n    useInteractionManager: false,\n    useReactNativeModal: true,\n    topAdjustment: 0,\n    accessible: true\n  };\n\n  static propTypes = {\n    allowChildInteraction: PropTypes.bool,\n    arrowSize: PropTypes.shape({\n      height: PropTypes.number,\n      width: PropTypes.number,\n    }),\n    backgroundColor: PropTypes.string,\n    childContentSpacing: PropTypes.number,\n    children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n    closeOnChildInteraction: PropTypes.bool,\n    closeOnContentInteraction: PropTypes.bool,\n    content: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n    displayInsets: PropTypes.shape({\n      top: PropTypes.number,\n      bottom: PropTypes.number,\n      left: PropTypes.number,\n      right: PropTypes.number,\n    }),\n    isVisible: PropTypes.bool,\n    onClose: PropTypes.func,\n    placement: PropTypes.oneOf(['top', 'left', 'bottom', 'right', 'center']),\n    showChildInTooltip: PropTypes.bool,\n    supportedOrientations: PropTypes.arrayOf(PropTypes.string),\n    useInteractionManager: PropTypes.bool,\n    useReactNativeModal: PropTypes.bool,\n    topAdjustment: PropTypes.number,\n    accessible: PropTypes.bool,\n  };\n\n  constructor(props) {\n    super(props);\n\n    const { isVisible, useInteractionManager } = props;\n\n    this.isMeasuringChild = false;\n\n    this.childWrapper = React.createRef();\n    this.state = {\n      // no need to wait for interactions if not visible initially\n      waitingForInteractions: isVisible && useInteractionManager,\n      contentSize: new Size(0, 0),\n      adjustedContentSize: new Size(0, 0),\n      anchorPoint: new Point(0, 0),\n      tooltipOrigin: new Point(0, 0),\n      childRect: new Rect(0, 0, 0, 0),\n      displayInsets: computeDisplayInsets(props.displayInsets),\n      // if we have no children, and place the tooltip at the \"top\" we want it to\n      // behave like placement \"bottom\", i.e. display below the top of the screen\n      placement:\n        React.Children.count(props.children) === 0\n          ? invertPlacement(props.placement)\n          : props.placement,\n      measurementsFinished: false,\n      windowDims: Dimensions.get('window'),\n    };\n  }\n\n  componentDidMount() {\n    Dimensions.addEventListener('change', this.updateWindowDims);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { content, isVisible, placement } = this.props;\n    const { displayInsets } = this.state;\n\n    const contentChanged = !rfcIsEqual(prevProps.content, content);\n    const placementChanged = prevProps.placement !== placement;\n    const becameVisible = isVisible && !prevProps.isVisible;\n    const insetsChanged = !rfcIsEqual(prevState.displayInsets, displayInsets);\n\n    if (contentChanged || placementChanged || becameVisible || insetsChanged) {\n      setTimeout(() => {\n        this.measureChildRect();\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    Dimensions.removeEventListener('change', this.updateWindowDims);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const nextState = {};\n\n    // update placement in state if the prop changed\n    const nextPlacement =\n      React.Children.count(nextProps.children) === 0\n        ? invertPlacement(nextProps.placement)\n        : nextProps.placement;\n\n    if (nextPlacement !== prevState.placement) {\n      nextState.placement = nextPlacement;\n    }\n\n    // update computed display insets if they changed\n    const nextDisplayInsets = computeDisplayInsets(nextProps.displayInsets);\n    if (!rfcIsEqual(nextDisplayInsets, prevState.displayInsets)) {\n      nextState.displayInsets = nextDisplayInsets;\n    }\n\n    // set measurements finished flag to false when tooltip closes\n    if (prevState.measurementsFinished && !nextProps.isVisible) {\n      nextState.measurementsFinished = false;\n      nextState.adjustedContentSize = new Size(0, 0);\n    }\n\n    if (Object.keys(nextState).length) {\n      return nextState;\n    }\n\n    return null;\n  }\n\n  updateWindowDims = dims => {\n    this.setState(\n      {\n        windowDims: dims.window,\n        contentSize: new Size(0, 0),\n        adjustedContentSize: new Size(0, 0),\n        anchorPoint: new Point(0, 0),\n        tooltipOrigin: new Point(0, 0),\n        childRect: new Rect(0, 0, 0, 0),\n        measurementsFinished: false,\n      },\n      () => {\n        setTimeout(() => {\n          this.measureChildRect();\n        }, 500); // give the rotation a moment to finish\n      },\n    );\n  };\n\n  doChildlessPlacement = () => {\n    this.onChildMeasurementComplete(\n      makeChildlessRect({\n        displayInsets: this.state.displayInsets,\n        placement: this.state.placement, // MUST use from state, not props\n        windowDims: this.state.windowDims,\n      }),\n    );\n  };\n\n  measureContent = e => {\n    const { width, height } = e.nativeEvent.layout;\n    const contentSize = new Size(width, height);\n    this.setState({ contentSize }, () => {\n      this.computeGeometry();\n    });\n  };\n\n  onChildMeasurementComplete = rect => {\n    this.setState(\n      {\n        childRect: rect,\n        waitingForInteractions: false,\n      },\n      () => {\n        this.isMeasuringChild = false;\n        if (this.state.contentSize.width) {\n          this.computeGeometry();\n        }\n      },\n    );\n  };\n\n  measureChildRect = () => {\n    const doMeasurement = () => {\n      if (!this.isMeasuringChild) {\n        this.isMeasuringChild = true;\n        if (\n          this.childWrapper.current &&\n          typeof this.childWrapper.current.measure === 'function'\n        ) {\n          this.childWrapper.current.measure(\n            (x, y, width, height, pageX, pageY) => {\n              const childRect = new Rect(pageX, pageY, width, height);\n              if (\n                Object.values(childRect).every(value => value !== undefined)\n              ) {\n                this.onChildMeasurementComplete(childRect);\n              } else {\n                this.doChildlessPlacement();\n              }\n            },\n          );\n        } else {\n          this.doChildlessPlacement();\n        }\n      }\n    };\n\n    if (this.props.useInteractionManager) {\n      InteractionManager.runAfterInteractions(() => {\n        doMeasurement();\n      });\n    } else {\n      doMeasurement();\n    }\n  };\n\n  computeGeometry = () => {\n    const { arrowSize, childContentSpacing } = this.props;\n    const {\n      childRect,\n      contentSize,\n      displayInsets,\n      placement,\n      windowDims,\n    } = this.state;\n\n    const options = {\n      displayInsets,\n      childRect,\n      windowDims,\n      arrowSize:\n        placement === 'top' || placement === 'bottom'\n          ? arrowSize\n          : swapSizeDimmensions(arrowSize),\n      contentSize,\n      childContentSpacing,\n    };\n\n    let geom = computeTopGeometry(options);\n\n    // special case for centered, childless placement tooltip\n    if (\n      placement === 'center' &&\n      React.Children.count(this.props.children) === 0\n    ) {\n      geom = computeCenterGeometry(options);\n    } else {\n      switch (placement) {\n        case 'bottom':\n          geom = computeBottomGeometry(options);\n          break;\n        case 'left':\n          geom = computeLeftGeometry(options);\n          break;\n        case 'right':\n          geom = computeRightGeometry(options);\n          break;\n        case 'top':\n        default:\n          break; // computed just above if-else-block\n      }\n    }\n\n    const { tooltipOrigin, anchorPoint, adjustedContentSize } = geom;\n\n    this.setState({\n      tooltipOrigin,\n      anchorPoint,\n      placement,\n      measurementsFinished: childRect.width && contentSize.width,\n      adjustedContentSize,\n    });\n  };\n\n  renderChildInTooltip = () => {\n    const { height, width, x, y } = this.state.childRect;\n\n    const onTouchEnd = () => {\n      if (this.props.closeOnChildInteraction) {\n        this.props.onClose();\n      }\n    };\n\n    return (\n      <TooltipChildrenContext.Provider value={{ tooltipDuplicate: true }}>\n        <View\n          onTouchEnd={onTouchEnd}\n          pointerEvents={this.props.allowChildInteraction ? 'box-none' : 'none'}\n          style={{\n            position: 'absolute',\n            height,\n            width,\n            top: y,\n            left: x,\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n        >\n          {this.props.children}\n        </View>\n      </TooltipChildrenContext.Provider>\n    );\n  };\n\n  renderContentForTooltip = () => {\n    const generatedStyles = styleGenerator({\n      adjustedContentSize: this.state.adjustedContentSize,\n      anchorPoint: this.state.anchorPoint,\n      arrowSize: this.props.arrowSize,\n      displayInsets: this.state.displayInsets,\n      measurementsFinished: this.state.measurementsFinished,\n      ownProps: { ...this.props },\n      placement: this.state.placement,\n      tooltipOrigin: this.state.tooltipOrigin,\n      topAdjustment: this.props.topAdjustment,\n    });\n\n    const hasChildren = React.Children.count(this.props.children) > 0;\n\n    const onPressContent = () => {\n      if (this.props.closeOnContentInteraction) {\n        this.props.onClose();\n      }\n    };\n\n    return (\n      <TouchableWithoutFeedback onPress={this.props.onClose} accessible={this.props.accessible}>\n        <View style={generatedStyles.containerStyle}>\n          <View style={[generatedStyles.backgroundStyle]}>\n            <View style={generatedStyles.tooltipStyle}>\n              {hasChildren ? <View style={generatedStyles.arrowStyle} /> : null}\n              <View\n                onLayout={this.measureContent}\n                style={generatedStyles.contentStyle}\n              >\n                <TouchableWithoutFeedback onPress={onPressContent} accessible={this.props.accessible}>\n                  {this.props.content}\n                </TouchableWithoutFeedback>\n              </View>\n            </View>\n          </View>\n          {hasChildren && this.props.showChildInTooltip\n            ? this.renderChildInTooltip()\n            : null}\n        </View>\n      </TouchableWithoutFeedback>\n    );\n  };\n\n  render() {\n    const { children, isVisible, useReactNativeModal } = this.props;\n\n    const hasChildren = React.Children.count(children) > 0;\n    const showTooltip = isVisible && !this.state.waitingForInteractions;\n\n    return (\n      <React.Fragment>\n        {useReactNativeModal ? (\n          <Modal\n            transparent\n            visible={showTooltip}\n            onRequestClose={this.props.onClose}\n            supportedOrientations={this.props.supportedOrientations}\n          >\n            {this.renderContentForTooltip()}\n          </Modal>\n        ) : null}\n\n        {/* This renders the child element in place in the parent's layout */}\n        {hasChildren ? (\n          <View ref={this.childWrapper} onLayout={this.measureChildRect}>\n            {children}\n          </View>\n        ) : null}\n\n        {!useReactNativeModal && showTooltip\n          ? this.renderContentForTooltip()\n          : null}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Tooltip;\n"]},"metadata":{},"sourceType":"module"}